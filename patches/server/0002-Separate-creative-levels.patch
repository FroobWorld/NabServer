From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: froobynooby <froobynooby@froobworld.com>
Date: Sun, 27 Feb 2022 21:27:01 +0930
Subject: [PATCH] Separate creative levels


diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1022.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1022.java
index c1510d9167f466d3b7e3756353224f12f3876442..d4f0561741e71e10bf08448a0237320728cc3629 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1022.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1022.java
@@ -15,6 +15,7 @@ public final class V1022 {
 
             WalkerUtils.convertList(MCTypeRegistry.ITEM_STACK, data, "Inventory", fromVersion, toVersion);
             WalkerUtils.convertList(MCTypeRegistry.ITEM_STACK, data, "EnderItems", fromVersion, toVersion);
+            WalkerUtils.convertList(MCTypeRegistry.ITEM_STACK, data, "Nabulus.CreativeLevelInventory", fromVersion, toVersion);
 
             WalkerUtils.convert(MCTypeRegistry.ENTITY, data, "ShoulderEntityLeft", fromVersion, toVersion);
             WalkerUtils.convert(MCTypeRegistry.ENTITY, data, "ShoulderEntityRight", fromVersion, toVersion);
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index c396580a9cfd86ff261bed439bb4662ae88010b5..7e5f08b33abc93d98622c504a48a295b6a8bfb50 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -697,6 +697,7 @@ public class ServerPlayer extends net.minecraft.world.entity.player.Player imple
             this.setPosRaw(position.x(), position.y(), position.z()); // Paper - don't register to chunks yet
         }
         this.gameMode.setLevel((ServerLevel) world);
+        this.chooseInventory(); // Nabulus
     }
     // CraftBukkit end
 
@@ -1402,6 +1403,7 @@ public class ServerPlayer extends net.minecraft.world.entity.player.Player imple
                 this.unsetRemoved();
                 // CraftBukkit end
                 this.setServerLevel(worldserver);
+                this.chooseInventory(); // Nabulus
                 this.connection.teleport(exit); // CraftBukkit - use internal teleport without event
                 this.connection.resetPosition();
                 worldserver.addDuringTeleport(this);
@@ -2035,12 +2037,22 @@ public class ServerPlayer extends net.minecraft.world.entity.player.Player imple
     }
 
     public void restoreFrom(ServerPlayer oldPlayer, boolean alive) {
+        // Nabulus start
+        this.restoreFrom(oldPlayer, alive, false);
+    }
+    public void restoreFrom(ServerPlayer oldPlayer, boolean alive, boolean toOrFromCreativeLevel) {
+        // Nabulus end
         this.wardenSpawnTracker = oldPlayer.wardenSpawnTracker;
         this.chatSession = oldPlayer.chatSession;
         this.gameMode.setGameModeForPlayer(oldPlayer.gameMode.getGameModeForPlayer(), oldPlayer.gameMode.getPreviousGameModeForPlayer());
         this.onUpdateAbilities();
         this.getAttributes().assignBaseValues(oldPlayer.getAttributes());
         // this.setHealth(this.getMaxHealth()); // CraftBukkit
+        // Nabulus start
+        this.normalInventory.replaceWith(oldPlayer.normalInventory);
+        this.creativeLevelInventory.replaceWith(oldPlayer.creativeLevelInventory);
+        this.usingNormalInventory = oldPlayer.usingNormalInventory;
+        // Nabulus end
         if (alive) {
             this.getInventory().replaceWith(oldPlayer.getInventory());
             this.setHealth(oldPlayer.getHealth());
@@ -2076,6 +2088,7 @@ public class ServerPlayer extends net.minecraft.world.entity.player.Player imple
         this.seenCredits = oldPlayer.seenCredits;
         this.enteredNetherPosition = oldPlayer.enteredNetherPosition;
         this.chunkTrackingView = oldPlayer.chunkTrackingView;
+        if (toOrFromCreativeLevel) return; // Nabulus
         this.setShoulderEntityLeft(oldPlayer.getShoulderEntityLeft());
         this.setShoulderEntityRight(oldPlayer.getShoulderEntityRight());
         this.setLastDeathLocation(oldPlayer.getLastDeathLocation());
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index c13922d2fb1c15f895b14d4cb6d5379b59ea1ef8..69fedcdafa25a9015546ae1367b1a65f6cecbe9a 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -819,9 +819,27 @@ public abstract class PlayerList {
         Level fromWorld = entityplayer.level();
         entityplayer.wonGame = false;
         // CraftBukkit end
+        // Nabulus start - moved from below
+        boolean isRespawn = false;
+        DimensionTransition dimensiontransition;
+        if (location == null) {
+            dimensiontransition = entityplayer.findRespawnPositionAndUseSpawnBlock(flag, DimensionTransition.DO_NOTHING, reason);
 
+            if (!flag) entityplayer.reset(); // SPIGOT-4785
+            isRespawn = true; // Paper - Add PlayerPostRespawnEvent
+        } else {
+            dimensiontransition = new DimensionTransition(((CraftWorld) location.getWorld()).getHandle(), CraftLocation.toVec3D(location), Vec3.ZERO, location.getYaw(), location.getPitch(), DimensionTransition.DO_NOTHING);
+        }
+        // Nabulus end
+        // Nabulus start
+        boolean toOrFromCreativeLevel = ((net.minecraft.world.level.storage.PrimaryLevelData) dimensiontransition.newLevel().levelData).creativeLevel || ((net.minecraft.world.level.storage.PrimaryLevelData) entityplayer.level().levelData).creativeLevel;
+        if (toOrFromCreativeLevel) {
+            entityplayer.releaseLeftShoulderEntity();
+            entityplayer.releaseRightShoulderEntity();
+        }
+        // Nabulus end
         entityplayer1.connection = entityplayer.connection;
-        entityplayer1.restoreFrom(entityplayer, flag);
+        entityplayer1.restoreFrom(entityplayer, flag, toOrFromCreativeLevel); // Nabulus
         entityplayer1.setId(entityplayer.getId());
         entityplayer1.setMainArm(entityplayer.getMainArm());
         // CraftBukkit - not required, just copies old location into reused entity
@@ -841,10 +859,12 @@ public abstract class PlayerList {
         }
         // Paper start - Add PlayerPostRespawnEvent
         boolean isBedSpawn = false;
-        boolean isRespawn = false;
+        //boolean isRespawn = false; // Nabulus - moved up
         // Paper end - Add PlayerPostRespawnEvent
 
         // CraftBukkit start - fire PlayerRespawnEvent
+        // Nabulus start - moved up
+        /*
         DimensionTransition dimensiontransition;
         if (location == null) {
             dimensiontransition = entityplayer.findRespawnPositionAndUseSpawnBlock(flag, DimensionTransition.DO_NOTHING, reason);
@@ -858,6 +878,8 @@ public abstract class PlayerList {
         } else {
             dimensiontransition = new DimensionTransition(((CraftWorld) location.getWorld()).getHandle(), CraftLocation.toVec3D(location), Vec3.ZERO, location.getYaw(), location.getPitch(), DimensionTransition.DO_NOTHING);
         }
+        */
+        // Nabulus end
         // Spigot Start
         if (dimensiontransition == null) { // Paper - Add PlayerPostRespawnEvent - diff on change - spigot early returns if respawn pos is null, that is how they handle disconnected player in respawn event
             return entityplayer;
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index e12cbbe9eea3f243808fad547c91bd546fd4bbc8..c3dc41d0b13212965821c135ac49e409cb177f64 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -3731,6 +3731,11 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
         // Paper end - Fix item duplication and teleport issues
         if (world instanceof ServerLevel worldserver) {
             if (!this.isRemoved()) {
+                // Nabulus start
+                if (!this.level.equals(worldserver) && ((net.minecraft.world.level.storage.PrimaryLevelData) this.level().levelData).creativeLevel) {
+                    return null;
+                }
+                // Nabulus end
                 // CraftBukkit start
                 Location to = new Location(teleportTarget.newLevel().getWorld(), teleportTarget.pos().x, teleportTarget.pos().y, teleportTarget.pos().z, teleportTarget.yRot(), this.getXRot()); // Paper - use getXRot (doesn't respect DimensionTransition pitch)
                 // Paper start - gateway-specific teleport event
diff --git a/src/main/java/net/minecraft/world/entity/PortalProcessor.java b/src/main/java/net/minecraft/world/entity/PortalProcessor.java
index 45761c113116ae7417e6ae99069bff35dbccdf30..3dd19ef284dcab420dfc56c100ccf1df3baefe1e 100644
--- a/src/main/java/net/minecraft/world/entity/PortalProcessor.java
+++ b/src/main/java/net/minecraft/world/entity/PortalProcessor.java
@@ -30,6 +30,11 @@ public class PortalProcessor {
 
     @Nullable
     public DimensionTransition getPortalDestination(ServerLevel world, Entity entity) {
+        // Nabulus start
+        if (((net.minecraft.world.level.storage.PrimaryLevelData) entity.level().levelData).creativeLevel) {
+            return null;
+        }
+        // Nabulus end
         return this.portal.getPortalDestination(world, entity, this.entryPosition);
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index 09bcbc0ae36e4e69fee87a7e0c49acf496117a39..591797efe64ca85da29fb876d00cf7fa8dd84ecc 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -202,6 +202,40 @@ public abstract class Player extends LivingEntity {
     public boolean fauxSleeping;
     public int oldLevel = -1;
 
+    // Nabulus start
+    protected final Inventory normalInventory = new Inventory(this);
+    protected final Inventory creativeLevelInventory = new Inventory(this);
+    private boolean inventoriesLoaded = false;
+    public boolean usingNormalInventory = true;
+
+    public void chooseInventory() {
+        if (!inventoriesLoaded) {
+            return;
+        }
+        if (((net.minecraft.world.level.storage.PrimaryLevelData)this.level().levelData).creativeLevel) {
+            if (usingNormalInventory) {
+                this.normalInventory.replaceWith(this.inventory);
+                this.inventory.replaceWith(this.creativeLevelInventory);
+                usingNormalInventory = false;
+            }
+        } else {
+            if (!usingNormalInventory) {
+                this.creativeLevelInventory.replaceWith(this.inventory);
+                this.inventory.replaceWith(this.normalInventory);
+                usingNormalInventory = true;
+            }
+        }
+    }
+
+    public Inventory getNormalInventory() {
+        return usingNormalInventory ? this.inventory : this.normalInventory;
+    }
+
+    public Inventory getCreativeLevelInventory() {
+        return usingNormalInventory ? this.creativeLevelInventory : this.inventory;
+    }
+    // Nabulus end
+
     @Override
     public CraftHumanEntity getBukkitEntity() {
         return (CraftHumanEntity) super.getBukkitEntity();
@@ -215,6 +249,7 @@ public abstract class Player extends LivingEntity {
         this.lastDeathLocation = Optional.empty();
         this.setUUID(gameProfile.getId());
         this.gameProfile = gameProfile;
+        this.chooseInventory(); // Nabulus
         this.inventoryMenu = new InventoryMenu(this.inventory, !world.isClientSide, this);
         this.containerMenu = this.inventoryMenu;
         this.moveTo((double) pos.getX() + 0.5D, (double) (pos.getY() + 1), (double) pos.getZ() + 0.5D, yaw, 0.0F);
@@ -877,6 +912,15 @@ public abstract class Player extends LivingEntity {
 
         this.inventory.load(nbttaglist);
         this.inventory.selected = nbt.getInt("SelectedItemSlot");
+        // Nabulus start
+        this.normalInventory.load(nbttaglist);
+        this.normalInventory.selected = nbt.getInt("SelectedItemSlot");
+        ListTag creativeLevelInventoryTagList = nbt.getList("Nabulus.CreativeLevelInventory", 10);
+        this.creativeLevelInventory.load(creativeLevelInventoryTagList);
+        this.creativeLevelInventory.selected = nbt.getInt("Nabulus.CreativeLevelSelectedItemSlot");
+        this.inventoriesLoaded = true;
+        this.usingNormalInventory = true;
+        // Nabulus end
         this.sleepCounter = nbt.getShort("SleepTimer");
         this.experienceProgress = nbt.getFloat("XpP");
         this.experienceLevel = nbt.getInt("XpLevel");
@@ -928,8 +972,12 @@ public abstract class Player extends LivingEntity {
     public void addAdditionalSaveData(CompoundTag nbt) {
         super.addAdditionalSaveData(nbt);
         NbtUtils.addCurrentDataVersion(nbt);
-        nbt.put("Inventory", this.inventory.save(new ListTag()));
-        nbt.putInt("SelectedItemSlot", this.inventory.selected);
+        nbt.put("Inventory", this.getNormalInventory().save(new ListTag())); // Nabulus
+        nbt.putInt("SelectedItemSlot", this.getNormalInventory().selected); // Nabulus
+        // Nabulus start
+        nbt.put("Nabulus.CreativeLevelInventory", this.getCreativeLevelInventory().save(new ListTag()));
+        nbt.putInt("Nabulus.CreativeLevelSelectedItemSlot", this.getCreativeLevelInventory().selected);
+        // Nabulus end
         nbt.putShort("SleepTimer", (short) this.sleepCounter);
         nbt.putFloat("XpP", this.experienceProgress);
         nbt.putInt("XpLevel", this.experienceLevel);
diff --git a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
index 85ba843ce7e1f62971e736fa2cc028c47b274ce4..dfcea62791961e82bc1f0dd26632d239a8322cda 100644
--- a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
+++ b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
@@ -167,6 +167,7 @@ public class LevelStorageSource {
         Lifecycle lifecycle = worlddimensions_b.lifecycle().add(registryManager.allRegistriesLifecycle());
         PrimaryLevelData worlddataserver = PrimaryLevelData.parse(dynamic1, worldsettings, worlddimensions_b.specialWorldProperty(), generatorsettings.options(), lifecycle);
         worlddataserver.pdc = ((Dynamic<Tag>) dynamic1).getElement("BukkitValues", null); // CraftBukkit - Add PDC to world
+        worlddataserver.creativeLevel = ((Dynamic<Tag>) dynamic1).get("Nabulus.CreativeLevel").asBoolean(false); // Nabulus
 
         return new LevelDataAndDimensions(worlddataserver, worlddimensions_b);
     }
diff --git a/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java b/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java
index efd0bcfebb3b4f63018d4e20a6a89f79192898d1..0ff5e2056ae0a7aee5654a6c249565cdc31d8fca 100644
--- a/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java
+++ b/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java
@@ -94,6 +94,7 @@ public class PrimaryLevelData implements ServerLevelData, WorldData {
     public Registry<LevelStem> customDimensions;
     private ServerLevel world;
     protected Tag pdc;
+    public boolean creativeLevel;
 
     public void setWorld(ServerLevel world) {
         if (this.world != null) {
@@ -257,6 +258,7 @@ public class PrimaryLevelData implements ServerLevelData, WorldData {
 
         levelNbt.putString("Bukkit.Version", Bukkit.getName() + "/" + Bukkit.getVersion() + "/" + Bukkit.getBukkitVersion()); // CraftBukkit
         this.world.getWorld().storeBukkitValues(levelNbt); // CraftBukkit - add pdc
+        levelNbt.putBoolean("Nabulus.CreativeLevel", this.creativeLevel); // Nabulus
     }
 
     private static ListTag stringCollectionToTag(Set<String> strings) {
